--- src/game/Entities/Player.h
+++ src/game/Entities/Player.h
@@ -762,10 +762,7 @@ class PlayerTaxi
         // Nodes
         void InitTaxiNodesForLevel(uint32 race, uint32 level);
         void LoadTaxiMask(const char* data);
-		void ClearTaxiDestinations()
-		{
-			m_TaxiDestinations.clear();
-		}
+
         bool IsTaximaskNodeKnown(uint32 nodeidx) const
         {
             uint8  field   = uint8((nodeidx - 1) / 32);
@@ -789,7 +786,6 @@ class PlayerTaxi
 
     private:
         TaxiMask m_taximask;
-		std::deque<uint32> m_TaxiDestinations;
 };
 
 std::ostringstream& operator<< (std::ostringstream& ss, PlayerTaxi const& taxi);
@@ -956,13 +952,6 @@ class Player : public Unit
         void SetTaxiCheater(bool on) { if (on) m_ExtraFlags |= PLAYER_EXTRA_TAXICHEAT; else m_ExtraFlags &= ~PLAYER_EXTRA_TAXICHEAT; }
         bool isGMVisible() const { return !(m_ExtraFlags & PLAYER_EXTRA_GM_INVISIBLE); }
         void SetGMVisible(bool on);
-		bool IsGroupVisibleFor(Player* p) const;
-		bool IsInSameGroupWith(Player const* p) const;
-		bool IsInSameRaidWith(Player const* p) const
-		{
-			return p == this || (GetGroup() != NULL && GetGroup() == p->GetGroup());
-		}
-
         void SetPvPDeath(bool on) { if (on) m_ExtraFlags |= PLAYER_EXTRA_PVP_DEATH; else m_ExtraFlags &= ~PLAYER_EXTRA_PVP_DEATH; }
 
         // 0 = own auction, -1 = enemy auction, 1 = goblin auction
@@ -978,7 +967,7 @@ class Player : public Unit
         }
 
 
-        void GiveXP(uint32 xp, Unit* victim, float groupRate = 1.f);
+        void GiveXP(uint32 xp, Creature* victim, float groupRate = 1.f);
         void GiveLevel(uint32 level);
 
         void InitStatsForLevel(bool reapplyMods = false);
@@ -1538,11 +1527,7 @@ class Player : public Unit
         PvPInfo pvpInfo;
         void UpdatePvP(bool state, bool overriding = false);
         void UpdatePvPContested(bool state, bool overriding = false);
-		void SetFFAPvP(bool state);
-		bool IsFFAPvP() const
-		{
-			return HasFlag(PLAYER_FLAGS, PLAYER_FLAGS_FFA_PVP);
-		}
+
         void UpdateZone(uint32 newZone, uint32 newArea);
         void UpdateArea(uint32 newArea);
         uint32 GetCachedZoneId() const { return m_zoneUpdateId; }
@@ -2030,7 +2015,7 @@ class Player : public Unit
         bool IsFreeFlying() const { return HasAuraType(SPELL_AURA_MOD_FLIGHT_SPEED_MOUNTED) || HasAuraType(SPELL_AURA_FLY); }
 
         void UpdateClientControl(Unit const* target, bool enabled, bool forced = false) const;
-		void SetClientControl(Unit* target, uint8 allowMove);
+
         void SetMover(Unit* target) { m_mover = target ? target : this; }
         Unit* GetMover() const { return m_mover; }
         bool IsSelfMover() const { return m_mover == this; }// normal case for player not controlling other unit
@@ -2139,7 +2124,6 @@ class Player : public Unit
         uint32 GetGroupUpdateFlag() const { return m_groupUpdateMask; }
         void SetGroupUpdateFlag(uint32 flag) { m_groupUpdateMask |= flag; }
         Player* GetNextRaidMemberWithLowestLifePercentage(float radius, AuraType noAuraType);
-		Player* GetNextRandomRaidMember(float radius);
         PartyResult CanUninviteFromGroup() const;
         void UpdateGroupLeaderFlag(const bool remove = false);
         // BattleGround Group System
@@ -2180,29 +2164,14 @@ class Player : public Unit
         virtual void AddGCD(SpellEntry const& spellEntry, uint32 forcedDuration = 0, bool updateClient = false) override;
         virtual void AddCooldown(SpellEntry const& spellEntry, ItemPrototype const* itemProto = nullptr, bool permanent = false, uint32 forcedDuration = 0) override;
         virtual void RemoveSpellCooldown(SpellEntry const& spellEntry, bool updateClient = true) override;
-		void RemoveSpellCooldown(uint32 spell_id, bool update = false);
         virtual void RemoveSpellCategoryCooldown(uint32 category, bool updateClient = true) override;
         virtual void RemoveAllCooldowns(bool sendOnly = false);
         virtual void LockOutSpells(SpellSchoolMask schoolMask, uint32 duration) override;
         void RemoveSpellLockout(SpellSchoolMask spellSchoolMask, std::set<uint32>* spellAlreadySent = nullptr);
         void SendClearCooldown(uint32 spell_id, Unit* target) const;
         void RemoveArenaSpellCooldowns();
-		void RemoveAllSpellCooldown();
         void _LoadSpellCooldowns(QueryResult* result);
         void _SaveSpellCooldowns();
-		//added to creature.h
-		bool HasSpellCooldown(uint32 spell_id) const
-		{
-			SpellCooldowns::const_iterator itr = m_spellCooldowns.find(spell_id);
-			return itr != m_spellCooldowns.end() && itr->second.end > time(NULL);
-		}
-
-		time_t GetSpellCooldownDelay(uint32 spell_id) const
-		{
-			SpellCooldowns::const_iterator itr = m_spellCooldowns.find(spell_id);
-			time_t t = time(NULL);
-			return itr != m_spellCooldowns.end() && itr->second.end > t ? itr->second.end - t : 0;
-		}
 
         template <typename F>
         void RemoveSomeCooldown(F check)
@@ -2344,7 +2313,6 @@ class Player : public Unit
 
         PlayerMails m_mail;
         PlayerSpellMap m_spells;
-		SpellCooldowns m_spellCooldowns;
 
         ActionButtonList m_actionButtons;
 